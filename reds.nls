;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team

;;MEM5 -> nbExploreur
;;MEM6 -> nbHarvester
;;MEM7 -> nbRocketLauncher
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to red-team-go-back-to-base
  if (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots2 ennemy1 ennemy2 [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to goRedExplorer
  plokwa-need-refuel
  ;let m min-one-of plokwa-perceive-missile [ distance myself ]
  ifelse (MEM5 = 1)
  [
    ifelse ( xcor = MEM0 and ycor = MEM1)
    [ ]
    [
      plokwa-go-to MEM0 MEM1
    ]
  ]
  [
    ifelse (MEM5 = 2) 
    [
      ifelse (xcor < (MEM0 - 2) and ycor < (MEM1 - 2))
      [
        set heading towardsxy MEM0 MEM1
        forward-move speed
      ]
      [
        plokwa-go-to MEM0 MEM1
      ]
    ]
    []
  ]
  
  ;red-team-go-back-to-base
  ;red-team-go-and-eat

  ;ifelse (not red-team-no-target?) [
  ;  red-team-call-rocket-launcher mem0 mem1 mem2
  ;  red-team-call-explorer mem0 mem1 mem2
  ;]
  ;[ let h one-of perceive-robots2 ennemy1 ennemy2
  ;  if ( h != nobody ) [ red-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ;]
end

to goRedRocketLauncher
  red-team-go-back-to-base
  red-team-select-target
  red-team-shoot
  red-team-go-and-eat

  if ((energy > 3000) and (nb-missiles < 5)) [ new-missile 1 ]
end

to goRedHarvester
  ;let m min-one-of plokwa-perceive-missile [ distance myself ]
  ;if ( m != nobody ) [ plokwa-avoidXYPerpendicular [xcor] of m [ycor] of m]
  
  plokwa-need-refuel
  
  let b min-one-of perceive-food [ distance self]
  ifelse (b = nobody) [
  ;; Dans l'etat un on cherche de la nourriture pour la planter
    ifelse (carrying-food? > 200)
    [
      plokwa-go-back-to-harvest
    ]
    [
      plokwa-find-food
    ]
    
  ][
    ifelse (distance b) <= 2
      [ take b ]
      [ set heading towards b - 20 + random 40
      plokwa-go-to [xcor] of b [ycor] of b
      ]
  ]
  ;; cherche à manger
  ;red-team-harvesters-go-and-eat
  
  
  
end

to goRedBase
  set label energy
  let n count perceive-food
  if (n = 0)[ plokwa-createSuicide ]
  let t one-of perceive-specific-robots2 ennemy1 ennemy2 rocketlaunchers
  if (t != nobody) [
    launch-rocket towards t
  ]
  
end

to plokwa-createSuicide
  new-Explorer 1 self
  let tmp perceive-specific-robots color Explorers 
  ask tmp [ if (MEM5 = 0) [give-energy myself 1000]]
end

;
; Part perpendicualiremet par rapport aux coordonnées x y
;
to plokwa-avoidXYPerpendicular [ x y ]
  let xDir x - xcor
  let yDir y - ycor
  set heading towardsxy (x - yDir) ( y + xDir)
  ifelse (free-ahead? speed = nobody) [ forward-move speed ]
      [
        show 1
      set heading towardsxy ( x + yDir) (y - xDir)
      ifelse (free-ahead? speed = nobody) [ forward-move speed ]
        [
          show 2
          set heading towardsxy (x - xDir) (y - yDir)
          ifelse (free-ahead? speed = nobody) [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
        ]
      ]
end

;
; Cherche de la nourriture et la ramène
;
to plokwa-find-food
  ifelse ((mem1 = -10000) and (mem2 = -10000 ))
  [
    plokwa-go-to [xcor] of mem3 (ycor + 5)
  ][
      plokwa-go-to mem1 mem2
  ]
end


;
; Va au point de coordonnées x y en évitant les obstacles
;
to plokwa-go-to [ x y ]
  set heading towardsxy x y
  ifelse (free-ahead? speed = nobody) [ forward-move speed ]
  [
    ;let xDir x - xcor
    ;let yDir y - ycor
    set heading (towardsxy x y) + 90 ;( x + yDir) (y - xDir)
    ifelse (free-ahead? speed = nobody) [ forward-move speed ]
    [
      set heading (towardsxy x y) + 90;( x - yDir) (y + xDir)
      ifelse (free-ahead? speed = nobody) [ forward-move speed ]
      [ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
    ]
  ]
end

to plokwa-go-to-s [ x y ]
  set heading towardsxy x y
  ifelse (free-ahead? (speed / 2) = nobody) [ forward-move (speed / 2) ]
  [
    ;let xDir x - xcor
    ;let yDir y - ycor
    set heading (towardsxy x y) + 90 ;( x + yDir) (y - xDir)
    ifelse (free-ahead? (speed / 2) = nobody) [ forward-move (speed / 2) ]
    [
      set heading (towardsxy x y) + 90;( x - yDir) (y + xDir)
      ifelse (free-ahead? (speed / 2) = nobody) [ forward-move (speed / 2) ]
      [ rt random 360 if (free-ahead? (speed / 2) = nobody) [ forward-move (speed / 2) ]]
    ]
  ]
end

to plokwa-go-back-to-harvest
  ;let b min-one-of my-bases [ distance myself ]
  let b mem3
  if (b != nobody) [
    ;; si le robot est à moins de 6 de la base
    ifelse (distance b < 6)
      [ 
        plant-seeds color max-seeds
        set heading towards b - 45 - random 90
      ]
    [
      set heading towards b
    ]
    ifelse (free-ahead? speed = nobody)  [ forward-move speed ][ rt random 360 if (free-ahead? 2 = nobody) [ forward-move speed ]]
    
    
  ]
end

to plokwa-need-refuel
  if (energy < 500 or carrying-food? > 3000)
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 700) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        ;set heading towards b - 20 + random 40
        ;;if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        ifelse (distance b > 4)
        [
          plokwa-go-to [xcor] of b [ycor] of b
        ]
        [
          plokwa-go-to-s [xcor] of b [ycor] of b
        ]
      ]
    ]
  ]
end
  
;
; renvoie les agents de type Missile dans le rayon de perception de l'agent
;
to-report plokwa-perceive-missile
  report Missiles in-radius 8
end


;; procedure pour initialiser les explorers rouges
to initRedExplorer
  let tempBase perceive-base( color )
  show tempBase
  let memLu [MEM9] of tempBase
  ifelse (memLu = [0])
  [ 
    set MEM5 1
    set MEM0 (xcor + 0.70710678118 * 9)
    set MEM1 (ycor + 0.70710678118 * 9)
  ]
  [ 
    ifelse (memLu = [1])
    [ 
      set MEM5 1
      set MEM0 (xcor + 0.70710678118 * 9)
      set MEM1 (ycor - 0.70710678118 * 9)
    ]
    [ 
      ifelse (memLu = [2])
      [ 
        set MEM5 1
        set MEM0 (xcor - 0.70710678118 * 9)
        set MEM1 (ycor - 0.70710678118 * 9)
      ]
      [ 
        ifelse (memLu = [3])
        [
          set MEM5 1
          set MEM0 (xcor - 0.70710678118 * 9)
          set MEM1 (ycor + 0.70710678118 * 9)
        ][]
      ]
    ]
  ]
  ask tempBase [set MEM9 (MEM9 + 1)]    
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
  let b min-one-of my-bases [ distance myself ]
  set mem3 b
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
  let b min-one-of my-bases [ distance myself ]
  set mem3 b
  set mem1 -10000
  set mem2 -10000
end

;; procedure pour initialiser les bases rouges
to initRedBase
  beep
  new-Explorer 4 self
  new-Harvester 3 self
end
